; ModuleID = 'grace program'
source_filename = "grace program"

@"Move from " = private constant [11 x i8] c"Move from \00", align 1
@" to " = private constant [5 x i8] c" to \00", align 1
@".\0A" = private constant [3 x i8] c".\0A\00", align 1
@NumberOfRings = private global i32 0
@"Please, give me the number of rings: " = private constant [38 x i8] c"Please, give me the number of rings: \00", align 1
@"\0AHere is the solution:\0A\0A" = private constant [25 x i8] c"\0AHere is the solution:\0A\0A\00", align 1
@left = private constant [5 x i8] c"left\00", align 1
@right = private constant [6 x i8] c"right\00", align 1
@middle = private constant [7 x i8] c"middle\00", align 1

define i32 @main() {
entry:
  call void @writeString(i8* getelementptr inbounds ([38 x i8], [38 x i8]* @"Please, give me the number of rings: ", i32 0, i32 0))
  %0 = call i32 @readInteger()
  store i32 %0, i32* @NumberOfRings, align 4
  call void @writeString(i8* getelementptr inbounds ([25 x i8], [25 x i8]* @"\0AHere is the solution:\0A\0A", i32 0, i32 0))
  %lval_tmp = load i32, i32* @NumberOfRings, align 4
  call void @"hanoi_$1"(i32 %lval_tmp, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @left, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @right, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @middle, i32 0, i32 0))
  ret i32 0
}

declare void @writeString(i8*)

declare i32 @readInteger()

define void @"hanoi_$1"(i32 %0, i8* %1, i8* %2, i8* %3) {
entry:
  %rings = alloca i32, align 4
  store i32 %0, i32* %rings, align 4
  %source = alloca i8*, align 8
  store i8* %1, i8** %source, align 8
  %target = alloca i8*, align 8
  store i8* %2, i8** %target, align 8
  %auxiliary = alloca i8*, align 8
  store i8* %3, i8** %auxiliary, align 8
  br label %cond

cond:                                             ; preds = %entry
  %lval_tmp = load i32, i32* %rings, align 4
  %greateqtmp = icmp sge i32 %lval_tmp, 1
  br i1 %greateqtmp, label %then, label %after

then:                                             ; preds = %cond
  %lval_tmp1 = load i32, i32* %rings, align 4
  %subtmp = sub i32 %lval_tmp1, 1
  %lval_tmp2 = load i8*, i8** %source, align 8
  %lval_tmp3 = load i8*, i8** %auxiliary, align 8
  %lval_tmp4 = load i8*, i8** %target, align 8
  call void @"hanoi_$1"(i32 %subtmp, i8* %lval_tmp2, i8* %lval_tmp3, i8* %lval_tmp4)
  %lval_tmp5 = load i8*, i8** %source, align 8
  %lval_tmp6 = load i8*, i8** %target, align 8
  call void @"move_$2"(i8* %lval_tmp5, i8* %lval_tmp6)
  %lval_tmp7 = load i32, i32* %rings, align 4
  %subtmp8 = sub i32 %lval_tmp7, 1
  %lval_tmp9 = load i8*, i8** %auxiliary, align 8
  %lval_tmp10 = load i8*, i8** %target, align 8
  %lval_tmp11 = load i8*, i8** %source, align 8
  call void @"hanoi_$1"(i32 %subtmp8, i8* %lval_tmp9, i8* %lval_tmp10, i8* %lval_tmp11)
  br label %after

after:                                            ; preds = %then, %cond
  ret void
}

define void @"move_$2"(i8* %0, i8* %1) {
entry:
  %source = alloca i8*, align 8
  store i8* %0, i8** %source, align 8
  %target = alloca i8*, align 8
  store i8* %1, i8** %target, align 8
  call void @writeString(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @"Move from ", i32 0, i32 0))
  %lval_tmp = load i8*, i8** %source, align 8
  call void @writeString(i8* %lval_tmp)
  call void @writeString(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @" to ", i32 0, i32 0))
  %lval_tmp1 = load i8*, i8** %target, align 8
  call void @writeString(i8* %lval_tmp1)
  call void @writeString(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @".\0A", i32 0, i32 0))
  ret void
}
