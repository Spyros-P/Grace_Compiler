; ModuleID = 'grace program'
source_filename = "grace program"

@limit = private global i32 0
@number = private global i32 0
@counter = private global i32 0
@"Please, give me the upper limit: " = private constant [34 x i8] c"Please, give me the upper limit: \00", align 1
@"Prime numbers between 0 and " = private constant [29 x i8] c"Prime numbers between 0 and \00", align 1
@":\0A\0A" = private constant [4 x i8] c":\0A\0A\00", align 1
@"2\0A" = private constant [3 x i8] c"2\0A\00", align 1
@"3\0A" = private constant [3 x i8] c"3\0A\00", align 1
@"\0A" = private constant [2 x i8] c"\0A\00", align 1
@" prime number(s) were found.\0A" = private constant [30 x i8] c" prime number(s) were found.\0A\00", align 1

define i32 @main() {
entry:
  call void @writeString(i8* getelementptr inbounds ([34 x i8], [34 x i8]* @"Please, give me the upper limit: ", i32 0, i32 0))
  %0 = call i32 @readInteger()
  store i32 %0, i32* @limit, align 4
  call void @writeString(i8* getelementptr inbounds ([29 x i8], [29 x i8]* @"Prime numbers between 0 and ", i32 0, i32 0))
  %lval_tmp = load i32, i32* @limit, align 4
  call void @writeInteger(i32 %lval_tmp)
  call void @writeString(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @":\0A\0A", i32 0, i32 0))
  store i32 0, i32* @counter, align 4
  br label %cond

cond:                                             ; preds = %entry
  %lval_tmp1 = load i32, i32* @limit, align 4
  %greateqtmp = icmp sge i32 %lval_tmp1, 2
  br i1 %greateqtmp, label %then, label %after

then:                                             ; preds = %cond
  %lval_tmp2 = load i32, i32* @counter, align 4
  %addtmp = add i32 %lval_tmp2, 1
  store i32 %addtmp, i32* @counter, align 4
  call void @writeString(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @"2\0A", i32 0, i32 0))
  br label %after

after:                                            ; preds = %then, %cond
  br label %cond3

cond3:                                            ; preds = %after
  %lval_tmp6 = load i32, i32* @limit, align 4
  %greateqtmp7 = icmp sge i32 %lval_tmp6, 3
  br i1 %greateqtmp7, label %then4, label %after5

then4:                                            ; preds = %cond3
  %lval_tmp8 = load i32, i32* @counter, align 4
  %addtmp9 = add i32 %lval_tmp8, 1
  store i32 %addtmp9, i32* @counter, align 4
  call void @writeString(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @"3\0A", i32 0, i32 0))
  br label %after5

after5:                                           ; preds = %then4, %cond3
  store i32 6, i32* @number, align 4
  br label %cond10

cond10:                                           ; preds = %after24, %after5
  %lval_tmp12 = load i32, i32* @number, align 4
  %lval_tmp13 = load i32, i32* @limit, align 4
  %lesseqtmp = icmp sle i32 %lval_tmp12, %lval_tmp13
  br i1 %lesseqtmp, label %body, label %after11

body:                                             ; preds = %cond10
  br label %cond14

after11:                                          ; preds = %cond10
  call void @writeString(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @"\0A", i32 0, i32 0))
  %lval_tmp36 = load i32, i32* @counter, align 4
  call void @writeInteger(i32 %lval_tmp36)
  call void @writeString(i8* getelementptr inbounds ([30 x i8], [30 x i8]* @" prime number(s) were found.\0A", i32 0, i32 0))
  ret i32 0

cond14:                                           ; preds = %body
  %lval_tmp17 = load i32, i32* @number, align 4
  %subtmp = sub i32 %lval_tmp17, 1
  %1 = call i32 @"prime_$1"(i32 %subtmp)
  %equaltmp = icmp eq i32 %1, 1
  br i1 %equaltmp, label %then15, label %after16

then15:                                           ; preds = %cond14
  %lval_tmp18 = load i32, i32* @counter, align 4
  %addtmp19 = add i32 %lval_tmp18, 1
  store i32 %addtmp19, i32* @counter, align 4
  %lval_tmp20 = load i32, i32* @number, align 4
  %subtmp21 = sub i32 %lval_tmp20, 1
  call void @writeInteger(i32 %subtmp21)
  call void @writeString(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @"\0A", i32 0, i32 0))
  br label %after16

after16:                                          ; preds = %then15, %cond14
  br label %cond22

cond22:                                           ; preds = %after16
  %lval_tmp28 = load i32, i32* @number, align 4
  %lval_tmp29 = load i32, i32* @limit, align 4
  %nequaltmp = icmp ne i32 %lval_tmp28, %lval_tmp29
  br i1 %nequaltmp, label %and_no_short, label %after24

then23:                                           ; preds = %and_no_short
  %lval_tmp30 = load i32, i32* @counter, align 4
  %addtmp31 = add i32 %lval_tmp30, 1
  store i32 %addtmp31, i32* @counter, align 4
  %lval_tmp32 = load i32, i32* @number, align 4
  %addtmp33 = add i32 %lval_tmp32, 1
  call void @writeInteger(i32 %addtmp33)
  call void @writeString(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @"\0A", i32 0, i32 0))
  br label %after24

after24:                                          ; preds = %then23, %cond22, %and_no_short
  %lval_tmp34 = load i32, i32* @number, align 4
  %addtmp35 = add i32 %lval_tmp34, 6
  store i32 %addtmp35, i32* @number, align 4
  br label %cond10

and_no_short:                                     ; preds = %cond22
  %lval_tmp25 = load i32, i32* @number, align 4
  %addtmp26 = add i32 %lval_tmp25, 1
  %2 = call i32 @"prime_$1"(i32 %addtmp26)
  %equaltmp27 = icmp eq i32 %2, 1
  br i1 %equaltmp27, label %then23, label %after24
}

declare void @writeString(i8*)

declare i32 @readInteger()

declare void @writeInteger(i32)

define i32 @"prime_$1"(i32 %0) {
entry:
  %i = alloca i32, align 4
  %n = alloca i32, align 4
  store i32 %0, i32* %n, align 4
  br label %cond

cond:                                             ; preds = %entry
  %lval_tmp = load i32, i32* %n, align 4
  %lesstmp = icmp slt i32 %lval_tmp, 0
  br i1 %lesstmp, label %then, label %else

then:                                             ; preds = %cond
  %lval_tmp1 = load i32, i32* %n, align 4
  %negtmp = sub i32 0, %lval_tmp1
  %1 = call i32 @"prime_$1"(i32 %negtmp)
  ret i32 %1

else:                                             ; preds = %cond
  br label %cond2

after:                                            ; preds = %after5, %after_ret
  ret i32 0

after_ret:                                        ; No predecessors!
  br label %after

cond2:                                            ; preds = %else
  %lval_tmp6 = load i32, i32* %n, align 4
  %lesstmp7 = icmp slt i32 %lval_tmp6, 2
  br i1 %lesstmp7, label %then3, label %else4

then3:                                            ; preds = %cond2
  ret i32 0

else4:                                            ; preds = %cond2
  br label %cond9

after5:                                           ; preds = %after12, %after_ret8
  br label %after

after_ret8:                                       ; No predecessors!
  br label %after5

cond9:                                            ; preds = %else4
  %lval_tmp13 = load i32, i32* %n, align 4
  %equaltmp = icmp eq i32 %lval_tmp13, 2
  br i1 %equaltmp, label %then10, label %else11

then10:                                           ; preds = %cond9
  ret i32 1

else11:                                           ; preds = %cond9
  br label %cond15

after12:                                          ; preds = %after18, %after_ret14
  br label %after5

after_ret14:                                      ; No predecessors!
  br label %after12

cond15:                                           ; preds = %else11
  %lval_tmp19 = load i32, i32* %n, align 4
  %modtmp = srem i32 %lval_tmp19, 2
  %equaltmp20 = icmp eq i32 %modtmp, 0
  br i1 %equaltmp20, label %then16, label %else17

then16:                                           ; preds = %cond15
  ret i32 0

else17:                                           ; preds = %cond15
  store i32 3, i32* %i, align 4
  br label %cond22

after18:                                          ; preds = %after_ret35, %after_ret21
  br label %after12

after_ret21:                                      ; No predecessors!
  br label %after18

cond22:                                           ; preds = %after28, %else17
  %lval_tmp24 = load i32, i32* %i, align 4
  %lval_tmp25 = load i32, i32* %n, align 4
  %divtmp = sdiv i32 %lval_tmp25, 2
  %lesseqtmp = icmp sle i32 %lval_tmp24, %divtmp
  br i1 %lesseqtmp, label %body, label %after23

body:                                             ; preds = %cond22
  br label %cond26

after23:                                          ; preds = %cond22
  ret i32 1

cond26:                                           ; preds = %body
  %lval_tmp29 = load i32, i32* %n, align 4
  %lval_tmp30 = load i32, i32* %i, align 4
  %modtmp31 = srem i32 %lval_tmp29, %lval_tmp30
  %equaltmp32 = icmp eq i32 %modtmp31, 0
  br i1 %equaltmp32, label %then27, label %after28

then27:                                           ; preds = %cond26
  ret i32 0

after28:                                          ; preds = %after_ret33, %cond26
  %lval_tmp34 = load i32, i32* %i, align 4
  %addtmp = add i32 %lval_tmp34, 2
  store i32 %addtmp, i32* %i, align 4
  br label %cond22

after_ret33:                                      ; No predecessors!
  br label %after28

after_ret35:                                      ; No predecessors!
  br label %after18
}
