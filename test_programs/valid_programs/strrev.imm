; ModuleID = 'grace program'
source_filename = "grace program"

@r = private global [20 x i8] zeroinitializer
@"\0A!dlrow olleH" = private constant [14 x i8] c"\0A!dlrow olleH\00", align 1

define i32 @main() {
entry:
  call void @"reverse_$1"(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @"\0A!dlrow olleH", i32 0, i32 0))
  call void @writeString(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @r, i32 0, i32 0))
  ret i32 0
}

declare void @writeString(i8*)

declare i32 @strlen(i8*)

define void @"reverse_$1"(i8* %0) {
entry:
  %i = alloca i32, align 4
  %l = alloca i32, align 4
  %s = alloca i8*, align 8
  store i8* %0, i8** %s, align 8
  %lval_tmp = load i8*, i8** %s, align 8
  %1 = call i32 @strlen(i8* %lval_tmp)
  store i32 %1, i32* %l, align 4
  store i32 0, i32* %i, align 4
  br label %cond

cond:                                             ; preds = %body, %entry
  %lval_tmp1 = load i32, i32* %i, align 4
  %lval_tmp2 = load i32, i32* %l, align 4
  %lesstmp = icmp slt i32 %lval_tmp1, %lval_tmp2
  br i1 %lesstmp, label %body, label %after

body:                                             ; preds = %cond
  %lval_tmp3 = load i32, i32* %i, align 4
  %pointer = getelementptr [20 x i8], [20 x i8]* @r, i32 0, i32 %lval_tmp3
  %lval_tmp4 = load i32, i32* %l, align 4
  %lval_tmp5 = load i32, i32* %i, align 4
  %subtmp = sub i32 %lval_tmp4, %lval_tmp5
  %subtmp6 = sub i32 %subtmp, 1
  %lval_tmp7 = load i8*, i8** %s, align 8
  %pointer8 = getelementptr i8, i8* %lval_tmp7, i32 %subtmp6
  %lval_tmp9 = load i8, i8* %pointer8, align 1
  store i8 %lval_tmp9, i8* %pointer, align 1
  %lval_tmp10 = load i32, i32* %i, align 4
  %addtmp = add i32 %lval_tmp10, 1
  store i32 %addtmp, i32* %i, align 4
  br label %cond

after:                                            ; preds = %cond
  %lval_tmp11 = load i32, i32* %i, align 4
  %pointer12 = getelementptr [20 x i8], [20 x i8]* @r, i32 0, i32 %lval_tmp11
  store i8 0, i8* %pointer12, align 1
  ret void
}
